openapi: 3.0.3
info:
  title: Inspektor
  version: 0.1.0
  description: Inspektor
paths:
  /api/case/:
    get:
      operationId: case_list
      description: A base viewset that allows reading (and enables filtering objects
        by ids), creating and updating objects.
      parameters:
      - in: query
        name: id
        schema:
          type: array
          items:
            type: integer
        description: Multiple values may be separated by commas.
        explode: false
        style: form
      tags:
      - case
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Case'
          description: ''
    post:
      operationId: case_create
      description: A base viewset that allows reading (and enables filtering objects
        by ids), creating and updating objects.
      tags:
      - case
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaseRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CaseRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CaseRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Case'
          description: ''
  /api/case/{id}/:
    get:
      operationId: case_retrieve
      description: A base viewset that allows reading (and enables filtering objects
        by ids), creating and updating objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this case.
        required: true
      tags:
      - case
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Case'
          description: ''
    put:
      operationId: case_update
      description: A base viewset that allows reading (and enables filtering objects
        by ids), creating and updating objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this case.
        required: true
      tags:
      - case
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaseRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CaseRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CaseRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Case'
          description: ''
    patch:
      operationId: case_partial_update
      description: A base viewset that allows reading (and enables filtering objects
        by ids), creating and updating objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this case.
        required: true
      tags:
      - case
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCaseRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCaseRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCaseRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Case'
          description: ''
    delete:
      operationId: case_destroy
      description: A base viewset that allows reading (and enables filtering objects
        by ids), creating and updating objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this case.
        required: true
      tags:
      - case
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/image/:
    get:
      operationId: image_list
      description: A base viewset that allows reading (and enables filtering objects
        by ids), creating and updating objects.
      parameters:
      - in: query
        name: id
        schema:
          type: array
          items:
            type: integer
        description: Multiple values may be separated by commas.
        explode: false
        style: form
      tags:
      - image
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Image'
          description: ''
    post:
      operationId: image_create
      description: A base viewset that allows reading (and enables filtering objects
        by ids), creating and updating objects.
      tags:
      - image
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
  /api/image/{id}/:
    get:
      operationId: image_retrieve
      description: A base viewset that allows reading (and enables filtering objects
        by ids), creating and updating objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this image.
        required: true
      tags:
      - image
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
    put:
      operationId: image_update
      description: A base viewset that allows reading (and enables filtering objects
        by ids), creating and updating objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this image.
        required: true
      tags:
      - image
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ImageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
    patch:
      operationId: image_partial_update
      description: A base viewset that allows reading (and enables filtering objects
        by ids), creating and updating objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this image.
        required: true
      tags:
      - image
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedImageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedImageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedImageRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
    delete:
      operationId: image_destroy
      description: A base viewset that allows reading (and enables filtering objects
        by ids), creating and updating objects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this image.
        required: true
      tags:
      - image
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/result/:
    get:
      operationId: result_list
      description: All Results in serelized will be returned
      parameters:
      - in: query
        name: id
        schema:
          type: array
          items:
            type: integer
        description: Multiple values may be separated by commas.
        explode: false
        style: form
      tags:
      - result
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Result'
          description: ''
    post:
      operationId: result_create
      description: All Results in serelized will be returned
      tags:
      - result
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResultRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
          description: ''
  /api/result/{id}/:
    get:
      operationId: result_retrieve
      description: All Results in serelized will be returned
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this inspection result.
        required: true
      tags:
      - result
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
          description: ''
    put:
      operationId: result_update
      description: All Results in serelized will be returned
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this inspection result.
        required: true
      tags:
      - result
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResultRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResultRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResultRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
          description: ''
    patch:
      operationId: result_partial_update
      description: All Results in serelized will be returned
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this inspection result.
        required: true
      tags:
      - result
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedResultRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedResultRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedResultRequest'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
          description: ''
    delete:
      operationId: result_destroy
      description: All Results in serelized will be returned
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this inspection result.
        required: true
      tags:
      - result
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    BlankEnum:
      enum:
      - ''
    Case:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        images:
          type: array
          items:
            type: integer
            nullable: true
        open_datetime:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        close_datetime:
          type: string
          format: date-time
          nullable: true
      required:
      - id
      - open_datetime
    CaseRequest:
      type: object
      properties:
        images:
          type: array
          items:
            type: integer
            nullable: true
        close_datetime:
          type: string
          format: date-time
          nullable: true
    DefectTypeEnum:
      enum:
      - SCRATCH
      - DENT
      - MISALIGNMENT
      type: string
      description: |-
        * `SCRATCH` - Scratch
        * `DENT` - Dent
        * `MISALIGNMENT` - Misalignment
    Image:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        case:
          type: integer
          nullable: true
        capture_datetime:
          type: string
          format: date-time
        file:
          type: string
          format: uri
      required:
      - capture_datetime
      - file
      - id
    ImageRequest:
      type: object
      properties:
        case:
          type: integer
          nullable: true
        capture_datetime:
          type: string
          format: date-time
        file:
          type: string
          format: binary
      required:
      - capture_datetime
      - file
    PatchedCaseRequest:
      type: object
      properties:
        images:
          type: array
          items:
            type: integer
            nullable: true
        close_datetime:
          type: string
          format: date-time
          nullable: true
    PatchedImageRequest:
      type: object
      properties:
        case:
          type: integer
          nullable: true
        capture_datetime:
          type: string
          format: date-time
        file:
          type: string
          format: binary
    PatchedResultRequest:
      type: object
      properties:
        passed:
          type: integer
          nullable: true
        part_number:
          type: string
          minLength: 1
          maxLength: 50
        defect_type:
          oneOf:
          - $ref: '#/components/schemas/DefectTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        defect_description:
          type: string
        severity:
          oneOf:
          - $ref: '#/components/schemas/SeverityEnum'
          - $ref: '#/components/schemas/BlankEnum'
        corrective_action:
          type: string
        inspector:
          type: integer
        image:
          type: integer
    Result:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        passed:
          type: integer
          nullable: true
        part_number:
          type: string
          maxLength: 50
        inspection_date:
          type: string
          format: date-time
          readOnly: true
        defect_type:
          oneOf:
          - $ref: '#/components/schemas/DefectTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        defect_description:
          type: string
        severity:
          oneOf:
          - $ref: '#/components/schemas/SeverityEnum'
          - $ref: '#/components/schemas/BlankEnum'
        corrective_action:
          type: string
        inspector:
          type: integer
        image:
          type: integer
      required:
      - id
      - image
      - inspection_date
      - inspector
      - part_number
    ResultRequest:
      type: object
      properties:
        passed:
          type: integer
          nullable: true
        part_number:
          type: string
          minLength: 1
          maxLength: 50
        defect_type:
          oneOf:
          - $ref: '#/components/schemas/DefectTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        defect_description:
          type: string
        severity:
          oneOf:
          - $ref: '#/components/schemas/SeverityEnum'
          - $ref: '#/components/schemas/BlankEnum'
        corrective_action:
          type: string
        inspector:
          type: integer
        image:
          type: integer
      required:
      - image
      - inspector
      - part_number
    SeverityEnum:
      enum:
      - MINOR
      - MAJOR
      - CRITICAL
      type: string
      description: |-
        * `MINOR` - Minor
        * `MAJOR` - Major
        * `CRITICAL` - Critical
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
servers:
- http://localhost:8000
